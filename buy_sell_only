#The algorithim works by calculating the mean and standard deviation of the gold / silver ratio.  If the ratio is greater
#than a specific zscore, sell your gold and buy silver.  If it is below the z score, sell gold and buy silver.
#This method has a fixed purchase amount that is used each day the threshold is triggered.

#Ward Greunke
#https://www.linkedin.com/in/wgreunke
#11/8/2018

import pandas as pd
import matplotlib#.pyplot as plt
import numpy as np
import statistics
from numpy import random
import math

shares_GLD=0
shares_SLV=0

#Create your DataFrame
df=pd.DataFrame(columns=["Dates","GLD","SLV"])
#random.seed(2)  #Allows you to stop randomness for testing.  Comment out to see different scenarios.
number_of_periods=200

dates=pd.date_range("1/1/2000",periods=number_of_periods) #periods = number of time ranges you want to create
df["Dates"]=dates


#Create the securities prices.  Start from a base point and add a normally distributed amount.
#SLV=np.random.randn(number_of_periods,1)*3+15
SLV_CAGR=.2
SLV_Vol=.4
GLD_CAGR=.3
GLD_Vol=.4
df.at[0,"GLD"]=1200
df.at[0,"SLV"]=14

spend_limit = 10000 #Have a fixed purchase amount for each time the event is triggered.

for i in range(1,df.shape[0]):
    df.at[i,"GLD"]=df.at[i-1,"GLD"]*(np.random.normal((GLD_CAGR/number_of_periods),GLD_Vol/math.sqrt(number_of_periods))+1)
    df.at[i,"SLV"]=df.at[i-1,"SLV"]*(np.random.normal((SLV_CAGR/number_of_periods),SLV_Vol/math.sqrt(number_of_periods))+1)



df["GLD_Shares"]=0 #Starting gold shares
df["SLV_Shares"]=0 #Starting silver shares
df["GLD_Position"]=0
df["SLV_Position"]=0
df["Portfolio"]=0 #This is the total value of the portfolio
df["Cash"]=0
df.at[0,"Cash"]=50000 # Initial Cash Balance
df.at[0,"Portfolio"]=df.at[0,"Cash"] #Start with no shares and just cash in your portfolio


df["GSRatio"]=df["GLD"]/df["SLV"]
mean_gs = statistics.mean(df["GSRatio"])
gs_std=statistics.stdev(df["GSRatio"])

#How many standard deviations are you away from the mean
df["Zscore"]=((df["GSRatio"]-mean_gs)/gs_std)


rebalance_limit=1 #Only rebalance when you are 1.5 standard deviations away from the mean

#This is the rebalance section, iterate through each row, and rebalance when necessary.  Only rebalance when Z Score is > rebalance_limit
#Buy in $10,000 lots at a time.
#Would like to use iterate but docs say do not to modify a dataframe you are iterating over.

#Start with the second row i = 1 .  First row has starting positions and allows for consistant comparison to the previous row.
print(df.head())
for i in range(1,df.shape[0]): #  df.shape[0] lists the number of rows of a dataframe
    
    #at each row, move the previous values down to the next row
    df.at[i,"SLV_Shares"]=df.at[i-1,"SLV_Shares"]
    df.at[i,"GLD_Shares"]=df.at[i-1,"GLD_Shares"]
    df.at[i,"Cash"]=df.at[i-1,"Cash"]

    if df.at[i,"Zscore"]>rebalance_limit: #Buy gold, sell silver
        if df.at[i,"GLD_Shares"]>0: # Sell gold first so you have cash to buy silver
            gld_value=df.at[i,"GLD_Shares"]*df.at[i,"GLD"]
            df.at[i,"Cash"]=df.at[i,"Cash"]+gld_value
            df.at[i,"GLD_Shares"]=0
          
        #Buy Silver if you have cash                                           
        if df.at[i,"Cash"]>spend_limit:
            num_shares=int(spend_limit/df.at[i,"SLV"])
            trade_amount=num_shares*df.at[i,"SLV"]
            df.at[i,"SLV_Shares"]=df.at[i,"SLV_Shares"]+num_shares #Increase your position in Silver
            df.at[i,"Cash"]=df.at[i,"Cash"]-trade_amount
            
        
    elif df.at[i,"Zscore"]<-rebalance_limit: #Buy Gold, negative z score -> Sell silver and buy gold
        if df.at[i,"SLV_Shares"]>0:
            slv_value=df.at[i,"SLV_Shares"]*df.at[i,"SLV"]
            df.at[i,"Cash"]=df.at[i,"Cash"]+slv_value
            df.at[i,"SLV_Shares"]=0

        if df.at[i,"Cash"]>spend_limit: #Only buy gold if you have the cash
            add_gld=int(spend_limit/df.at[i,"GLD"])
            gld_trade_amount=add_gld*df.at[i,"GLD"]
            df.at[i,"GLD_Shares"]=df.at[i,"GLD_Shares"]+add_gld
            df.at[i,"Cash"]=df.at[i,"Cash"]-gld_trade_amount
               
    #Find the total value of your portfolio
    df.at[i,"GLD_Position"]=df.at[i,"GLD"]*df.at[i,"GLD_Shares"]
    df.at[i,"SLV_Position"]=df.at[i,"SLV"]*df.at[i,"SLV_Shares"]
    df.at[i,"Portfolio"]=df.at[i,"Cash"]+df.at[i,"GLD_Position"]+df.at[i,"SLV_Position"]
    #End for Loop



ax1=df.plot("Dates","GLD")
df.plot("Dates","SLV",secondary_y=True, ax=ax1)

df.plot("Dates","GSRatio")

df.plot("Dates",["SLV_Position","GLD_Position","Portfolio", "Cash"])

